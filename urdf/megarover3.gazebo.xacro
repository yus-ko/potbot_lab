<?xml version="1.0"?>
<robot name="megarover3" xmlns:xacro="http://ros.org/wiki/xacro">
  <xacro:arg name="laser_visual"  default="false"/>
  <xacro:arg name="camera_visual" default="false"/>
  <xacro:arg name="imu_visual"    default="false"/>

  <!-- If tf_prefix is given, use "frame tf_prefix/imu_frame", else "imu_frame" -->
  <xacro:arg name="tf_prefix" default="" />
  <xacro:property name="tf_prefix" value="$(arg tf_prefix)" />
  <xacro:if value="${tf_prefix == ''}">
      <xacro:property name="imu_frame" value="imu_link" />
  </xacro:if>
  <xacro:unless value="${tf_prefix == ''}">
      <xacro:property name="imu_frame" value="$(arg tf_prefix)/imu_link" />
  </xacro:unless>

  <gazebo reference="camera_stay_link">
    <material>Gazebo/Grey</material>
  </gazebo>

  <xacro:property name="body_color" value="Gazebo/Silver" />
  <xacro:property name="wheel_color" value="Gazebo/DarkGrey" />

  <gazebo reference="base_link">
    <material>${body_color}</material>
    <mu1>0.1</mu1>
    <mu2>0.1</mu2>
    <kp>1e6</kp>
    <kd>100.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>1.0</maxVel>
  </gazebo>

  <gazebo reference="wheel_right_link">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <fdir1>1 0 0</fdir1>
    <kp>1e6</kp>
    <kd>10.0</kd>
    <minDepth>0.0001</minDepth>
    <maxVel>0.1</maxVel>
    <material>${wheel_color}</material>
  </gazebo>

  <gazebo reference="wheel_left_link">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <fdir1>1 0 0</fdir1>
    <kp>1e6</kp>
    <kd>10.0</kd>
    <minDepth>0.0001</minDepth>
    <maxVel>0.1</maxVel>
    <material>${wheel_color}</material>
  </gazebo>

  <gazebo>
    <plugin name="megarover3_controller" filename="libgazebo_ros_diff_drive.so">
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <odometrySource>world</odometrySource>
      <publishOdomTF>true</publishOdomTF>
      <robotBaseFrame>base_footprint</robotBaseFrame>
      <publishWheelTF>false</publishWheelTF>
      <publishTf>true</publishTf>
      <publishWheelJointState>true</publishWheelJointState>
      <legacyMode>false</legacyMode>
      <updateRate>30</updateRate>
      <leftJoint>wheel_left_joint</leftJoint>
      <rightJoint>wheel_right_joint</rightJoint>
      <wheelSeparation>0.272</wheelSeparation>
      <wheelDiameter>0.140</wheelDiameter>
      <wheelAcceleration>1.0</wheelAcceleration>
      <wheelTorque>30</wheelTorque>
      <rosDebugLevel>na</rosDebugLevel>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so" />
  </gazebo> 

  <gazebo reference="base_scan">
    <sensor type="ray" name="urg_lrf_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>$(arg laser_visual)</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>1000</samples>
            <resolution>1</resolution>
            <min_angle>-2.3562</min_angle>
            <max_angle>2.3562</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.06</min>
          <max>4.0</max>
          <resolution>0.001</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.03</stddev>
        </noise>
      </ray>
      <plugin name="urg_lrf_controller" filename="libgazebo_ros_laser.so">
        <topicName>scan</topicName>
        <frameName>base_scan</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <gazebo reference="imu_link">
    <!-- <gravity>true</gravity> -->
    <sensor name="imu_sensor" type="imu">
      <always_on>true</always_on>
      <update_rate>100</update_rate>
      <visualize>true</visualize>
      <topic>imu</topic>
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
        <topicName>imu</topicName>
        <bodyName>imu_link</bodyName>
        <updateRateHZ>30.0</updateRateHZ>
        <gaussianNoise>0.0</gaussianNoise>
        <xyzOffset>0 0 0</xyzOffset>
        <rpyOffset>0 0 0</rpyOffset>
        <frameName>${imu_frame}</frameName>
        <initialOrientationAsReference>false</initialOrientationAsReference>
      </plugin>
      <pose>0 0 0 0 0 0</pose>
    </sensor>
  </gazebo>

  <gazebo reference="left_camera_frame">
    <sensor type="camera" name="Pi Camera">
      <always_on>true</always_on>
      <visualize>$(arg camera_visual)</visualize>
    </sensor>
  </gazebo>

  <gazebo reference="left_camera_frame">
    <sensor name="depth_camera" type="depth">
      <update_rate>20</update_rate>
      <camera>
        <horizontal_fov>1.047198</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.05</near>
          <far>3</far>
        </clip>
      </camera>
      <plugin name="depth_camera_controller" filename="libgazebo_ros_openni_kinect.so">
        <baseline>0.2</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>1.0</updateRate>
        <cameraName>camera</cameraName>
        <imageTopicName>color/image_raw</imageTopicName>
        <cameraInfoTopicName>color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>depth/image_raw</depthImageTopicName>
        <depthImageInfoTopicName>depth/camera_info</depthImageInfoTopicName>
        <pointCloudTopicName>depth/points</pointCloudTopicName>
        <frameName>left_camera_optical_frame</frameName>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortionK1>0.00000001</distortionK1>
        <distortionK2>0.00000001</distortionK2>
        <distortionK3>0.00000001</distortionK3>
        <distortionT1>0.00000001</distortionT1>
        <distortionT2>0.00000001</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>

</robot>
